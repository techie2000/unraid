
# below here was added by .my_bash_function

# cd into a directory and list it's contents
cdl() {
    cd "$@" || return; lsl;
}

# find a file by its inum
findi() {
    if [ $# -eq 0 ]
    then
        echo "Please supply an inum"
    else
        find . -inum "$1"
    fi
}

# find a file by its name
findn() {
    if [ $# -eq 0 ]
    then
        echo "Please supply (part of) a filename"
    else
        find . -iname "$1"
    fi
}

infoCertNames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}â€¦"
	echo ""; # newline

	local tmp
	tmp=$(echo -e "GET / HTTP/1.0\\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText
		certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux")
		echo "Common Name:"
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
		echo ""; # newline
		echo "Subject Alternative Name(s):"
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

infoDistro() {
    if [[ $(uname --kernel-name) != 'Linux' ]]
    then
        retval='unknown'
    else
        if [ -n "$(command -v lsb_release)" ]
        then
            retval="$(lsb_release -s -d)"
        elif [ -f "/etc/os-release" ]
        then
            retval="$(grep PRETTY_NAME /etc/os-release | sed 's/PRETTY_NAME=//g' | tr -d '="')"
        elif [ -f "/etc/debian_version" ]
        then
            retval="Debian $(cat /etc/debian_version)"
        elif [ -f "/etc/redhat-release" ]
        then
            retval="$(cat /etc/redhat-release)"
        else
            retval="$(uname -s) $(uname -r)"
        fi
    fi
    echo "$retval"
}

# identify the vendor for a given mac
infoMacVendor() {
    if [ $# -eq 0 ]
    then
        echo "Please supply a valid mac address"
    else
        if [[ "$1" =~ ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$ ]]
        then
            curl http://api.macvendors.com/"$1"
        else
            echo "$1 is an invalid MAC address"
        fi
    fi
}

#check directory exists
isDirectoryAvailable() {
    if [ $# -eq 0 ]
    then
        echo "Please supply a directory name to check its existence"
    else
        if [ -d "$1" ]
        then
            true
        else
            false
        fi
    fi
}

#check file exists
isFileAvailable() {
    if [ $# -eq 0 ]
    then
        echo "Please supply a filename to check its existence"
    else
        if [ -f "$1" ]
        then
            true
        else
            false
        fi
    fi
}

# check if string is a number
isNum() {
    if [ $# -eq 0 ]
    then
        echo "Please supply a string in order to determine if it's a number"
    else
        if isnum "$1"
        then
            true
        else
            false
        fi
    fi
}

# check if a package is installed
isPackageInstalled () {
    type "$1" &> /dev/null
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# make direcotry and cd into it in one action
mkcd ()
{
  mkdir -p -- "$1" && cd -P -- "$1"
}

# Detect OS and Services
nmapos() {
    if [ $# -eq 0 ]
    then
        echo "Please supply an ip address or servername"
    else
        nmap -A "$1"
    fi
}

# Detect OS and Services (More aggressive Service Detection)
nmapos2() {
    if [ $# -eq 0 ]
    then
        echo "Please supply an ip address or servername"
    else
        nmap -sV --version-intensity 5 "$1"
    fi
}

# Detect OS and Services (Digging deeper with NSE Scripts)
# Scan using default safe scripts
nmapos3() {
    if [ $# -eq 0 ]
    then
        echo "Please supply an ip address or servername"
    else
        nmap -sV -sC "$1"
    fi
}

# Scan for vulnerabilities
nmapv() {
    if [ $# -eq 0 ]
    then
        echo "Please supply an ip address or servername"
    else
        nmap -sV --script vulners "$1"
    fi
}

# cd 'up' n levels
up () {
    COUNTER=$1
    while [[ $COUNTER -gt 0 ]]
    do
        UP="${UP}../"
        COUNTER=$(( COUNTER -1 ))
    done
    echo "cd $UP"
    cd "$UP" || exit
    UP=''
}

# above here was added by .my_bash_function
