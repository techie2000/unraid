
# below here was added by .my_bash_aliases

# Personalisation
PERSONAL_calendar=true
PERSONAL_df=true
PERSONAL_hardlink=true
PERSONAL_ls=true

alias bzip='bzip2 --keep'

alias   ..='cd ..'
alias cd..='cd ..' # Pickup and fix my common typo

# View the calender by typing the first three letters of the month.
# Optionally add the year as a parameter
if [[ "${PERSONAL_calendar}" == "true" ]]
then
    if isPackageInstalled cal
    then
        alias jan='cal -m 01'
        alias feb='cal -m 02'
        alias mar='cal -m 03'
        alias apr='cal -m 04'
        alias may='cal -m 05'
        alias jun='cal -m 06'
        alias jul='cal -m 07'
        alias aug='cal -m 08'
        alias sep='cal -m 09'
        alias oct='cal -m 10'
        alias nov='cal -m 11'
        alias dec='cal -m 12'
    else
        echo "cal is not installed :( Consider installing it!"
    fi
fi

alias chgrp='chgrp --preserve-root' # safety net
alias chmod='chmod --preserve-root' # safety net
alias chown='chown --preserve-root' # safety net
alias cls='clear' # For when I get confused with Windows/DOS!

# invoke an alternative way to copy files
if isPackageInstalled rsync; then
    alias cp='rsync'
else
    echo "rsync is not installed :( Consider installing it!"
fi

# pidstat flags
# run continously every m seconds (for n times)
alias cpu='pidstat 5'

# diff options:
#   -y, --side-by-side     :  output in two columns
#       --color[=WHEN]     :  color output; WHEN is 'never', 'always', or 'auto'
alias diff='diff --color --side-by-side'

# df options:
#   -h, --human-readable   : print sizes in powers of 1024 (e.g., 1023M)
#   -k                     : like --block-size=1K
#   -T, --print-type       : print file system type
if [[ "${PERSONAL_df}" == "true" ]]
then
    alias df='df -k --human-readable --print-type | grep '"'disk[^s]\|cache\|shm\|user0\|log'"
fi

# invoke a du alternative if it's installed
if isPackageInstalled ncdu
then
    alias du='ncdu'
else
    echo "ncdu is not installed :( Consider installing it!"
    alias du='du -ch | grep total'
fi
alias dut='df -hl --total | grep total' # total disk usage

# egrep option :
#    --colo[u]r[=WHEN]     : use markers to highlight the matching strings; WHEN is 'always', 'never', or 'auto'
alias egrep='egrep --color=auto'

# what's my external facing IP ?
if isPackageInstalled cur
then
    alias externalip='curl icanhazip.com'
else
    echo "curl is not installed :( Consider installing it!"
fi

# fgrep option :
#    --colo[u]r[=WHEN]     : use markers to highlight the matching strings; WHEN is 'always', 'never', or 'auto'
alias fgrep='fgrep --color=auto'

alias findd='find . -type d -name'
alias finddir='findd'
alias findf='find . -type f -name'
alias findfile='findf'
alias findi='find . -inum'
alias findinum='findi'

alias gits='git status'
alias gs='gits'

# grep option :
#    --colo[u]r[=WHEN]     : use markers to highlight the matching strings; WHEN is 'always', 'never', or 'auto'
alias grep='grep --color=auto'

# invoke hardlink with personal settings
if [[ "${PERSONAL_hardlink}" == "true" ]]
then
    alias hardlink='hardlink --content --keep-oldest --minimum-size 1K --io-size 16M --cache-size 16M --verbose'
    alias hardlinkdryrun='hardlink --content --keep-oldest --minimum-size 1K --io-size 16M --cache-size 16M --dry-run --verbose'
fi

alias h='hist'
alias hist='history'
alias hg='histg'
alias histg='history|grep '

alias infoArchitecture='uname --machine'
alias infoCpu='infoProcessor'
alias infoHost='infoArchitecture; infoProcessor; infoKernelName; infoKernelRelease'
alias infoKernel='infoKernelName; infoKernelRelease'
alias infoKernelName='uname --kernel-name'
alias infoKernelRelease='uname --kernel-release'
alias infoProcessor='uname --processor'
alias infoProcessorDetailed='lscpu'

case $(infoDistro) in
    Slackware* )
        alias installpkg='upgradepkg --install-new' ;;
    CentOS*|Fedora*|RedHatEnterpriseServer* )
        alias installpkg='sudo yum install'
        alias update='yum -y update' ;;
    Ubuntu*|Debian*|Raspbian* )
        alias installpkg='sudo apt-get --yes'
        alias update='sudo apt-get update && sudo apt-get upgrade' ;;
esac

# iostat flags
# -d m n = run continously every m seconds for n times
# -t   = print the time of each report
alias io='iostat -d 5 --human -t'

# what's my local IP ?
if isPackageInstalled curl; then
    alias localip='ifconfig -a | grep -o '\''inet6\? \(\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\)\|[a-fA-F0-9:]\+\)'\'' | sed -e '\''s/inet6* //'\'''
else
    echo "curl is not installed :( Consider installing it!"
fi

# invoke ls with personal settings
# ls options :
#   -F, --classify         : append indicator (one of */=>@|) to entries
#   -l                     : use a long listing format
#   -t                     : sort by modification time, newest first
#   --almost-all           : do not list implied . and ..
#   --color[=WHEN]         : colorize the output; WHEN can be 'never', 'auto', or 'always'
#   --human-readable       : with -l, print sizes in human readable format (e.g., 1K 234M 2G)
#   --indicator-style=WORD : append indicator with style WORD to entry names: none, slash (-p), file-type (--file-type), classify (-F)
#   --inode                : print the index number of each file
#   --reverse              : reverse order while sorting
#   --time-style=STYLE     : with -l, show times using style STYLE: full-iso, long-iso, iso, locale, or +FORMAT;
#                             FORMAT is interpreted like in 'date';
#                             if FORMAT is FORMAT1<newline>FORMAT2, then FORMAT1 applies to non-recent files and FORMAT2 to recent files;
#                             if STYLE is prefixed with 'posix-', STYLE takes effect only outside the POSIX locale
if [[ "${PERSONAL_ls}" == "true" ]]
then
    alias ls='ls --almost-all --color=always'
    alias lst='ls --almost-all --color=always --human-readable --reverse -t'
    alias lsl='ls --almost-all --classify --color=always --human-readable --inode -l --time-style=full-iso'
    alias lslt='ls --almost-all --classify --color=always --human-readable --inode -l --reverse -t --time-style=full-iso'
fi

# list what node modules are installed on the system
if [[ "${PERSONAL_ls}" == "true" ]]
then
    alias lsnode='lsl /usr/lib64/node_modules/'
else
    alias lsnode='lsl --almost-all --color --human-readable --inode -l /usr/lib64/node_modules/'
fi

# list what packages are installed on the system
if [[ "${PERSONAL_ls}" == "true" ]]
then
    alias lspkgs='lsl /var/log/packages/'
else
    alias lspkgs='lsl --almost-all --color --human-readable --inode -l /var/log/packages/'
fi

# mkdir options:
#    -p, --parents     no error if existing, make parent directories as needed,
#                      with their file modes unaffected by any -m option.
#    -v, --verbose     print a message for each created directory
alias mkdir='mkdir parents --verbose'

if isPackageInstalled ccze
then
    alias mount='mount|sort|column -t|ccze -A' # Make mount readable!
else
    alias mount='mount|sort|column -t' # Make mount readable!
    echo "ccze is not installed :( Consider installing it!"
fi

# invoke an alternative (and safe) way to move files
if isPackageInstalled rsync
then
    alias mv='rsync --archive --compress --hard-links --human-readable --info=progress2 --open-noatime --stats --times --verbose --xattrs --remove-source-files'
else
    echo "rsync is not installed :( Consider installing it!"
fi

alias publicip='externalip'

# rm options:
#    -f, --force          : ignore nonexistent files and arguments, never prompt
#    -i                   : prompt before every removal
#    -I                   : prompt once before removing more than three files, or
#                             when removing recursively; less intrusive than -i,
#                             while still giving protection against most mistakes
#   -r, -R, --recursive   : remove directories and their contents recursively
#   --interactive[=WHEN]  : prompt according to WHEN: never, once (-I), or always (-i); without WHEN, prompt always
#   --preserve-root       : do not remove '/' (default)
#   --verbose explain what is being done
alias rm='rm --recursive --force --interactive=once --preserve-root' # safety net

# rsync options:
#   -a, --archive          : archive mode; equals -rlptgoD (no -H,-A,-X)
#   -A, --acls             : preserve ACLs (implies --perms)
#   -g, --group            : preserve group
#   -h, --human-readable   : output numbers in a human-readable format
#   -H, --hard-links       : preserve hard links
#   -l, --links            : copy symlinks as symlinks
#   -o, --owner            : preserve owner (super-user only)
#   -p, --perms            : preserve permissions
#   -r, --recursive        : recurse into directories
#   -t, --times            : preserve modification times
#   -v, --verbose          : increase verbosity
#   -X, --xattrs           : preserve extended attributes
#   -z, --compress         : compress file data during the transfer
#   --info=FLAGS           : fine-grained informational verbosity
#   --noatime              : do not alter atime when opening source files
#   --open-noatime         : the new version of --noatime (Which to use depends on which flavour of rsync you have)
#   --progress             : show progress during transfer
#   --remove-source-files  : sender removes synchronized files (non-dirs)
#   --stats                : give some file-transfer stats
alias rsync='rsync --archive --compress --hard-links --human-readable --info=progress2 --open-noatime --recursive --stats --times --verbose --xattrs'

alias spacehogs='du -hsx * | sort -rh | head -10'  # list top 10 diskspace consumers
alias showpkgs='lspkgs'
alias su='sudo -i'
alias topcpu='ps auxf | sort -nr -k 3 | head -10'  # list top 10 cpu consuming processes
alias topmem='ps auxf | sort -nr -k 4 | head -10'  # list top 10 memory consuming processes

alias watchtail='watch -n .5 tail -n 20'

# wget options:
#   -c,  --continue        : resume getting a partially-downloaded file
#        --show-progress   : display the progress bar in any verbosity mode
alias wget='wget --continue --show-progress'

# who is on my network
if isPackageInstalled nmap
then
    alias whosonmynetwork='nmap -sP 192.168.0.0/24'
else
    echo "nmap is not installed :( Consider installing it!"
fi

# above here was added by .my_bash_aliases
